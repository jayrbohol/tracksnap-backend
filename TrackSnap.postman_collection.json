  {
    "info": {
      "_postman_id": "b6f7f1f0-4c6e-4b8b-9c42-tracksnap12345",
      "name": "TrackSnap Backend API",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": "Postman collection for TrackSnap parcel tracking backend."
    },
    "item": [
      {
        "name": "Health Check",
        "request": {
          "method": "GET",
          "header": [],
          "url": { "raw": "{{baseUrl}}/health", "host": ["{{baseUrl}}"], "path": ["health"] }
        },
        "response": []
      },
      {
  "name": "Create Parcel",
        "event": [
          {
            "listen": "test",
            "script": {
              "exec": [
                "const json = pm.response.json();",
                "pm.test('Created parcel has id', function() { pm.expect(json.id).to.be.a('string'); });",
                "pm.collectionVariables.set('parcelId', json.id);",
                "pm.test('QR code present', function() { pm.expect(json.qr).to.include('data:image'); });",
                "pm.test('Includes sortationCenter', function() { pm.expect(json).to.have.property('sortationCenter'); });",
                "pm.test('Includes deliveryHub', function() { pm.expect(json).to.have.property('deliveryHub'); });",
                "pm.test('Allows missing pickupLocation (optional)', function() { pm.expect(json).to.have.property('pickupLocation'); });"
              ],
              "type": "text/javascript"
            }
          }
        ],
        "request": {
          "method": "POST",
          "header": [ { "key": "Content-Type", "value": "application/json" } ],
          "body": {
            "mode": "raw",
        "raw": "{\n  \"recipient\": { \"name\": \"Jane Doe\", \"phone\": \"+15550001111\", \"email\": \"jane@example.com\", \"coordinates\": { \"lat\": 40.7128, \"lng\": -74.0060 } },\n  \"pickupLocation\": { \"lat\": 40.6900, \"lng\": -74.0200 },\n  \"sortationCenter\": { \"lat\": 40.7000, \"lng\": -74.0100 },\n  \"deliveryHub\": { \"lat\": 40.7100, \"lng\": -74.0000 },\n  \"metadata\": { \"orderId\": \"ORDER123\" }\n}"
          },
          "url": { "raw": "{{baseUrl}}/parcel", "host": ["{{baseUrl}}"], "path": ["parcel"] }
        },
        "response": []
      },
      {
        "name": "Get Parcel by ID",
        "request": {
          "method": "GET",
          "header": [],
          "url": { "raw": "{{baseUrl}}/parcel/{{parcelId}}", "host": ["{{baseUrl}}"], "path": ["parcel", "{{parcelId}}"] }
        },
        "event": [
          {
            "listen": "test",
            "script": {"type": "text/javascript", "exec": [
              "pm.test('Parcel id matches variable', function(){ pm.expect(pm.response.json().id).to.eql(pm.collectionVariables.get('parcelId')); });"
            ]}
          }
        ],
        "response": []
      },
      {
        "name": "Verify Scan (Log Handoff)",
        "request": {
          "method": "POST",
          "header": [ {"key": "Content-Type", "value": "application/json"} ],
          "body": {
            "mode": "raw",
            "raw": "{\n  \"parcelId\": \"{{parcelId}}\",\n  \"courierId\": \"courier-42\",\n  \"gps\": { \"lat\": 40.7128, \"lng\": -74.0060 }\n}"
          },
          "url": { "raw": "{{baseUrl}}/verify-scan", "host": ["{{baseUrl}}"], "path": ["verify-scan"] }
        },
        "event": [
          {"listen": "test", "script": {"type": "text/javascript", "exec": [
            "const json = pm.response.json();",
            "pm.test('Handoff logged', function(){ pm.expect(json.parcel.handoffLog.length).to.be.greaterThan(0); });"
          ]}}
        ],
        "response": []
      },
      {
        "name": "Submit Feedback",
        "request": {
          "method": "POST",
          "header": [ {"key": "Content-Type", "value": "application/json"} ],
          "body": {"mode": "raw", "raw": "{\n  \"parcelId\": \"{{parcelId}}\",\n  \"rating\": 5,\n  \"issue\": \"Box dented\"\n}"},
          "url": { "raw": "{{baseUrl}}/feedback", "host": ["{{baseUrl}}"], "path": ["feedback"] }
        },
        "event": [
          {"listen": "test", "script": {"type": "text/javascript", "exec": [
            "pm.test('Feedback recorded', function(){ pm.expect(pm.response.json().parcel.feedback).to.be.an('object'); });"
          ]}}
        ],
        "response": []
      },
      {
        "name": "Track Parcel (Location Update)",
        "request": {
          "method": "POST",
          "header": [ {"key": "Content-Type", "value": "application/json"} ],
          "body": {"mode": "raw", "raw": "{\n  \"parcelId\": \"{{parcelId}}\",\n  \"coordinates\": { \"lat\": 40.713, \"lng\": -74.005 },\n  \"timestamp\": \"{{currentTimestamp}}\"\n}"},
          "url": { "raw": "{{baseUrl}}/track-parcel", "host": ["{{baseUrl}}"], "path": ["track-parcel"] }
        },
        "event": [
          {"listen": "prerequest", "script": {"type": "text/javascript", "exec": [
            "pm.collectionVariables.set('currentTimestamp', new Date().toISOString());"
          ]}},
          {"listen": "test", "script": {"type": "text/javascript", "exec": [
            "const json = pm.response.json();",
            "pm.test('Tracking response has parcelId', () => pm.expect(json.parcelId).to.eql(pm.collectionVariables.get('parcelId')));",
            "pm.test('Latest contains coordinates', () => pm.expect(json.latest.coordinates).to.be.an('object'));",
            "pm.test('Includes recipientCoordinates (nullable)', () => pm.expect(json).to.have.property('recipientCoordinates'));",
            "pm.test('Includes distanceMeters when both points known', () => { if(json.recipientCoordinates && json.latest.coordinates) { pm.expect(json.distanceMeters).to.be.a('number'); } });",
            "pm.test('Legs object present after first tracking (if destination + at least one hub point exists)', () => { if(json.recipientCoordinates){ pm.expect(json).to.have.property('legs'); } });"
          ]}}
        ],
        "response": []
      },
      {
        "name": "Update Hubs",
        "request": {
          "method": "PATCH",
          "header": [ { "key": "Content-Type", "value": "application/json" } ],
          "body": { "mode": "raw", "raw": "{\n  \"sortationCenter\": { \"lat\": 40.7050, \"lng\": -74.0120 },\n  \"deliveryHub\": { \"lat\": 40.7150, \"lng\": -73.9950 },\n  \"actor\": \"ops-user-1\"\n}" },
          "url": { "raw": "{{baseUrl}}/parcel/{{parcelId}}/hubs", "host": ["{{baseUrl}}"], "path": ["parcel", "{{parcelId}}", "hubs"] }
        },
        "event": [
          {"listen": "test", "script": {"type": "text/javascript", "exec": [
            "const json = pm.response.json();",
            "pm.test('Hub update returns parcel id', () => pm.expect(json.id).to.eql(pm.collectionVariables.get('parcelId')));",
            "pm.test('Hub audit log exists', () => pm.expect(json.hubAuditLog).to.be.an('array'));",
            "pm.test('Legs reset after hub update', () => pm.expect(json.legs).to.be.undefined);"
          ]}}
        ],
        "response": []
      },
      {
        "name": "Get Tracking History",
        "request": {
          "method": "GET",
          "header": [],
          "url": { "raw": "{{baseUrl}}/parcel/{{parcelId}}/tracking", "host": ["{{baseUrl}}"], "path": ["parcel", "{{parcelId}}", "tracking"] }
        },
        "event": [
          {"listen": "test", "script": {"type": "text/javascript", "exec": [
            "const json = pm.response.json();",
            "pm.test('Tracking history returns array', () => pm.expect(json.points).to.be.an('array'));"
          ]}}
        ],
        "response": []
      }
    ],
    "variable": [
      { "key": "baseUrl", "value": "http://localhost:4000" },
      { "key": "parcelId", "value": "" }
    ]
    ,
    "event": []
  }
